// Generated by Dagger (https://google.github.io/dagger).
package com.mvvmdemo.di.module;

import com.mvvmdemo.data.local.prefs.PreferencesHelper;
import com.mvvmdemo.data.remote.ApiHeader;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideProtectedApiHeaderFactory
    implements Factory<ApiHeader.ProtectedApiHeader> {
  private final AppModule module;

  private final Provider<String> apiKeyProvider;

  private final Provider<PreferencesHelper> preferencesHelperProvider;

  public AppModule_ProvideProtectedApiHeaderFactory(
      AppModule module,
      Provider<String> apiKeyProvider,
      Provider<PreferencesHelper> preferencesHelperProvider) {
    this.module = module;
    this.apiKeyProvider = apiKeyProvider;
    this.preferencesHelperProvider = preferencesHelperProvider;
  }

  @Override
  public ApiHeader.ProtectedApiHeader get() {
    return Preconditions.checkNotNull(
        module.provideProtectedApiHeader(apiKeyProvider.get(), preferencesHelperProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static AppModule_ProvideProtectedApiHeaderFactory create(
      AppModule module,
      Provider<String> apiKeyProvider,
      Provider<PreferencesHelper> preferencesHelperProvider) {
    return new AppModule_ProvideProtectedApiHeaderFactory(
        module, apiKeyProvider, preferencesHelperProvider);
  }

  public static ApiHeader.ProtectedApiHeader proxyProvideProtectedApiHeader(
      AppModule instance, String apiKey, PreferencesHelper preferencesHelper) {
    return Preconditions.checkNotNull(
        instance.provideProtectedApiHeader(apiKey, preferencesHelper),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
