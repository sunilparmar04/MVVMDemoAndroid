// Generated by Dagger (https://google.github.io/dagger).
package com.mvvmdemo.ui.main;

import android.arch.lifecycle.ViewModelProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MainActivityModule_MainViewModelProviderFactory
    implements Factory<ViewModelProvider.Factory> {
  private final MainActivityModule module;

  private final Provider<MainViewModel> mainViewModelProvider;

  public MainActivityModule_MainViewModelProviderFactory(
      MainActivityModule module, Provider<MainViewModel> mainViewModelProvider) {
    this.module = module;
    this.mainViewModelProvider = mainViewModelProvider;
  }

  @Override
  public ViewModelProvider.Factory get() {
    return Preconditions.checkNotNull(
        module.mainViewModelProvider(mainViewModelProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MainActivityModule_MainViewModelProviderFactory create(
      MainActivityModule module, Provider<MainViewModel> mainViewModelProvider) {
    return new MainActivityModule_MainViewModelProviderFactory(module, mainViewModelProvider);
  }

  public static ViewModelProvider.Factory proxyMainViewModelProvider(
      MainActivityModule instance, MainViewModel mainViewModel) {
    return Preconditions.checkNotNull(
        instance.mainViewModelProvider(mainViewModel),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
