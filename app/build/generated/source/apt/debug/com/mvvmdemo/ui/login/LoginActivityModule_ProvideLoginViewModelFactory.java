// Generated by Dagger (https://google.github.io/dagger).
package com.mvvmdemo.ui.login;

import com.mvvmdemo.data.DataManager;
import com.mvvmdemo.utils.rx.SchedulerProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class LoginActivityModule_ProvideLoginViewModelFactory
    implements Factory<LoginViewModel> {
  private final LoginActivityModule module;

  private final Provider<DataManager> dataManagerProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  public LoginActivityModule_ProvideLoginViewModelFactory(
      LoginActivityModule module,
      Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    this.module = module;
    this.dataManagerProvider = dataManagerProvider;
    this.schedulerProvider = schedulerProvider;
  }

  @Override
  public LoginViewModel get() {
    return Preconditions.checkNotNull(
        module.provideLoginViewModel(dataManagerProvider.get(), schedulerProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static LoginActivityModule_ProvideLoginViewModelFactory create(
      LoginActivityModule module,
      Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    return new LoginActivityModule_ProvideLoginViewModelFactory(
        module, dataManagerProvider, schedulerProvider);
  }

  public static LoginViewModel proxyProvideLoginViewModel(
      LoginActivityModule instance, DataManager dataManager, SchedulerProvider schedulerProvider) {
    return Preconditions.checkNotNull(
        instance.provideLoginViewModel(dataManager, schedulerProvider),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
