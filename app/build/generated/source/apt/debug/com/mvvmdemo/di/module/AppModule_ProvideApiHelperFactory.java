// Generated by Dagger (https://google.github.io/dagger).
package com.mvvmdemo.di.module;

import com.mvvmdemo.data.remote.ApiHelper;
import com.mvvmdemo.data.remote.AppApiHelper;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideApiHelperFactory implements Factory<ApiHelper> {
  private final AppModule module;

  private final Provider<AppApiHelper> appApiHelperProvider;

  public AppModule_ProvideApiHelperFactory(
      AppModule module, Provider<AppApiHelper> appApiHelperProvider) {
    this.module = module;
    this.appApiHelperProvider = appApiHelperProvider;
  }

  @Override
  public ApiHelper get() {
    return Preconditions.checkNotNull(
        module.provideApiHelper(appApiHelperProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static AppModule_ProvideApiHelperFactory create(
      AppModule module, Provider<AppApiHelper> appApiHelperProvider) {
    return new AppModule_ProvideApiHelperFactory(module, appApiHelperProvider);
  }

  public static ApiHelper proxyProvideApiHelper(AppModule instance, AppApiHelper appApiHelper) {
    return Preconditions.checkNotNull(
        instance.provideApiHelper(appApiHelper),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
