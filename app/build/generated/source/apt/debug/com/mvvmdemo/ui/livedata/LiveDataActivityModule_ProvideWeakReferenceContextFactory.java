// Generated by Dagger (https://google.github.io/dagger).
package com.mvvmdemo.ui.livedata;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.lang.ref.WeakReference;
import javax.inject.Provider;

public final class LiveDataActivityModule_ProvideWeakReferenceContextFactory
    implements Factory<WeakReference<LiveDataActivity>> {
  private final LiveDataActivityModule module;

  private final Provider<LiveDataActivity> activityProvider;

  public LiveDataActivityModule_ProvideWeakReferenceContextFactory(
      LiveDataActivityModule module, Provider<LiveDataActivity> activityProvider) {
    this.module = module;
    this.activityProvider = activityProvider;
  }

  @Override
  public WeakReference<LiveDataActivity> get() {
    return Preconditions.checkNotNull(
        module.provideWeakReferenceContext(activityProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static LiveDataActivityModule_ProvideWeakReferenceContextFactory create(
      LiveDataActivityModule module, Provider<LiveDataActivity> activityProvider) {
    return new LiveDataActivityModule_ProvideWeakReferenceContextFactory(module, activityProvider);
  }

  public static WeakReference<LiveDataActivity> proxyProvideWeakReferenceContext(
      LiveDataActivityModule instance, LiveDataActivity activity) {
    return Preconditions.checkNotNull(
        instance.provideWeakReferenceContext(activity),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
